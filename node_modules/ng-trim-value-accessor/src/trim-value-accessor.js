"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var TRIM_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return TrimValueAccessor; }),
    multi: true
};
/**
 * The trim accessor for writing trimmed value and listening to changes that is
 * used by the {@link NgModel}, {@link FormControlDirective}, and
 * {@link FormControlName} directives.
 */
var TrimValueAccessor = (function (_super) {
    __extends(TrimValueAccessor, _super);
    function TrimValueAccessor() {
        var _this = this;
        _super.apply(this, arguments);
        this.ngOnChange = function (val) {
            _this.onChange(val.trim());
        };
    }
    TrimValueAccessor.prototype.applyTrim = function (val) {
        this.writeValue(val.trim());
    };
    ;
    TrimValueAccessor.prototype.writeValue = function (value) {
        if (typeof value === 'string') {
            value = value.trim();
        }
        _super.prototype.writeValue.call(this, value);
    };
    __decorate([
        core_1.HostListener('input', ['$event.target.value']), 
        __metadata('design:type', Object)
    ], TrimValueAccessor.prototype, "ngOnChange", void 0);
    __decorate([
        core_1.HostListener('blur', ['$event.target.value']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [String]), 
        __metadata('design:returntype', void 0)
    ], TrimValueAccessor.prototype, "applyTrim", null);
    TrimValueAccessor = __decorate([
        core_1.Directive({
            selector: "\n    input:not([type=checkbox]):not([type=radio]):not([type=password])[formControlName],\n    input:not([type=checkbox]):not([type=radio]):not([type=password])[formControl],\n    input:not([type=checkbox]):not([type=radio]):not([type=password])[ngModel],\n    textarea[formControlName],\n    textarea[formControl],\n    textarea[ngModel],\n    [ngDefaultControl]'\n  ",
            providers: [TRIM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [])
    ], TrimValueAccessor);
    return TrimValueAccessor;
}(forms_1.DefaultValueAccessor));
exports.TrimValueAccessor = TrimValueAccessor;
//# sourceMappingURL=trim-value-accessor.js.map